'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplTokenMetadata = require('@metaplex-foundation/mpl-token-metadata');
var errors = require('./errors.cjs');
var SdkError = require('../../errors/SdkError.cjs');

const tokenDelegateRoleMap = {
  StandardV1: mplTokenMetadata.TokenDelegateRole.Standard,
  TransferV1: mplTokenMetadata.TokenDelegateRole.Transfer,
  LockedTransferV1: mplTokenMetadata.TokenDelegateRole.LockedTransfer,
  SaleV1: mplTokenMetadata.TokenDelegateRole.Sale,
  UtilityV1: mplTokenMetadata.TokenDelegateRole.Utility,
  StakingV1: mplTokenMetadata.TokenDelegateRole.Staking
};
const metadataDelegateRoleMap = {
  // AuthorityV1: MetadataDelegateRole.Authority,
  CollectionV1: mplTokenMetadata.MetadataDelegateRole.Collection,
  // UseV1: MetadataDelegateRole.Use,
  UpdateV1: mplTokenMetadata.MetadataDelegateRole.Update,
  ProgrammableConfigV1: mplTokenMetadata.MetadataDelegateRole.ProgrammableConfig
};
const metadataDelegateSeedMap = {
  [mplTokenMetadata.MetadataDelegateRole.Authority]: 'authority_delegate',
  [mplTokenMetadata.MetadataDelegateRole.Collection]: 'collection_delegate',
  [mplTokenMetadata.MetadataDelegateRole.Use]: 'use_delegate',
  [mplTokenMetadata.MetadataDelegateRole.Update]: 'update_delegate',
  [mplTokenMetadata.MetadataDelegateRole.ProgrammableConfig]: 'programmable_config_delegate'
};
const delegateCustomDataMap = {
  // Metadata.
  // AuthorityV1: false,
  CollectionV1: false,
  // UseV1: false,
  UpdateV1: false,
  ProgrammableConfigV1: false,
  // Token
  StandardV1: true,
  TransferV1: true,
  SaleV1: true,
  UtilityV1: true,
  StakingV1: true,
  LockedTransferV1: true
};
const getTokenDelegateRole = type => {
  const role = tokenDelegateRoleMap[type];
  if (!role) throw new SdkError.UnreachableCaseError(type);
  return role;
};
const getMetadataDelegateRole = type => {
  const role = metadataDelegateRoleMap[type];
  if (!role) throw new SdkError.UnreachableCaseError(type);
  return role;
};
const getMetadataDelegateRoleSeed = type => {
  return metadataDelegateSeedMap[getMetadataDelegateRole(type)];
};
const getDefaultDelegateArgs = type => {
  const hasCustomData = delegateCustomDataMap[type];
  if (hasCustomData === undefined) throw new SdkError.UnreachableCaseError(type);
  if (hasCustomData) throw new errors.DelegateRoleRequiredDataError(type);
  return {
    __kind: type
  };
};

exports.getDefaultDelegateArgs = getDefaultDelegateArgs;
exports.getMetadataDelegateRole = getMetadataDelegateRole;
exports.getMetadataDelegateRoleSeed = getMetadataDelegateRoleSeed;
exports.getTokenDelegateRole = getTokenDelegateRole;
//# sourceMappingURL=DelegateType.cjs.map
